import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../store/store';
import { Todo } from '../../types/types';
import { getTodos } from '../../utils/getTodos';
// import { fetchCount } from './counterAPI';

// export interface CounterState {
//   value: number;
//   status: 'idle' | 'loading' | 'failed';
// }

export interface TodosState {
    todos: Todo[];
    status: 'loading' | 'succeeded' | 'failed' | null
  }

const initialState: TodosState = {
  todos: [],
  status: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const fetchAllTodos = createAsyncThunk(
  'counter/fetchCount',
  async () => {
    return getTodos()
  }
);

export const todoSlice = createSlice({
  name: 'todos',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addTodo: (state, action)=>{
        const newTodo = {
            id: action.payload.todo.id,
            title: action.payload.todo.title,
            completed: action.payload.todo.completed
        }
        state.todos.push(newTodo);
    },
    removeTodo: (state, action)=>{
        state.todos.filter((todo) => todo.id !== action.payload.todo.id);
    },
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
        .addCase(fetchAllTodos.pending, (state) => {
            state.status = 'loading'
        })
        .addCase(fetchAllTodos.fulfilled, (state, action) => {
            state.status = 'succeeded'
            state.todos = state.todos.concat(action.payload)
        })
        .addCase(fetchAllTodos.rejected, (state) => {
            state.status = 'failed'
        })
  }
});

export const { addTodo, removeTodo } = todoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTodos = (state: RootState) => state.todos;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default todoSlice.reducer;
